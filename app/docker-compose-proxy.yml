services:
  plandex-postgres:
    image: postgres:latest
    restart: always
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - ./scripts/init-db:/docker-entrypoint-initdb.d
      - ${PGDATA_DIR}:/var/lib/postgresql/data
    networks:
      - plandex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      retries: 3
  plandex-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    volumes:
      - "${PLANDEX_DATA_DIR}:${PLANDEX_BASE_DIR}"
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plandex-postgres:5432/${POSTGRES_DATABASE}?sslmode=disable"
      GOENV: $GOENV
      PLANDEX_BASE_DIR: $PLANDEX_BASE_DIR

    networks:
      - plandex-network
      - llm-network
    depends_on:
      plandex-postgres:
        condition: service_healthy
      llm-proxy:
        condition: service_healthy 
    command: [ "/bin/sh", "-c", "/scripts/wait-for-it.sh plandex-postgres:5432 -- ./plandex-server" ]

  llm-proxy:
    build:
      context: ./llm-proxy
      target: dev
    ports:
      - "18000:18000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
      - PROXY_API_KEY=${PROXY_API_KEY}
      - OPENAI_API_URL=${OPENAI_API_URL}
      - GOOGLE_GEMINI_API_URL=${GOOGLE_GEMINI_API_URL}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
    volumes:
      - ./key.json:/app/key.json
    networks:
      - llm-network
    healthcheck:
      test: ["CMD", "curl", "http://localhost:18000/health"]
      interval: 1s
      timeout: 5s
      retries: 10
      start_period: 5s
networks:
  plandex-network:
    driver: bridge
  llm-network:
    driver: bridge
